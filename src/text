Создание класса с инкапсуляцией
Создайте класс Person, который содержит следующие поля:
имя (String name)
возраст (int age)
номер паспорта (String passportNumber)
Для каждого поля создайте:
приватные поля (для инкапсуляции)
публичные геттеры и сеттеры, за исключением поля passportNumber, для которого должен быть доступ только через геттер.
Напишите конструктор, который инициализирует name и age. Номер паспорта должен быть доступен только через метод setPassportNumber(), который будет изменять его значение только при соблюдении определённых условий (например, если номер не пустой и соответствует формату).
Использование модификаторов доступа
Создайте класс BankAccount с приватными полями:
номер счета (String accountNumber)
баланс (double balance)
Реализуйте методы:
публичный метод для пополнения счета (deposit(double amount))
публичный метод для снятия средств (withdraw(double amount))
приватный метод для проверки наличия достаточного баланса.

Напишите конструктор, который инициализирует номер счета и баланс. Также реализуйте проверку баланса в методах deposit() и withdraw(), чтобы не было возможности снять больше средств, чем на счете.

Класс с вычислениями и инкапсуляцией
Создайте класс Rectangle, который инкапсулирует:

длину (double length)
ширину (double width)
Реализуйте:

геттеры и сеттеры для обеих сторон (должны быть проверены на положительность значений).
метод calculateArea(), который вычисляет площадь прямоугольника.
метод calculatePerimeter(), который вычисляет периметр прямоугольника.
Добавьте в класс проверки на правильность значений: например, длина и ширина не могут быть отрицательными.

POJO классы и их использование
Создайте класс Book,
который будет представлять книгу с полями:

title (название книги)
author (автор книги)
yearPublished (год публикации)
price (цена книги)
Класс должен быть POJO (Plain Old Java Object), т.е. должен включать:

конструктор по умолчанию.
геттеры и сеттеры для каждого поля.
Напишите программу, которая создаёт несколько экземпляров класса Book, заполняет их данными и выводит информацию о книгах на экран.

Работа с инкапсуляцией и модификаторами доступа
Создайте класс Employee с полями:
имя (String name)
должность (String position)
зарплата (double salary)
возраст (int age)
Используйте следующие модификаторы доступа:
private для всех полей.
public для геттеров и сеттеров.
protected для метода calculateBonus(), который будет рассчитывать премию сотрудника, равную 10% от зарплаты.
Добавьте проверку, что зарплата и возраст сотрудника не могут быть отрицательными в соответствующих сеттерах.
Реализация класса с приватными данными
Создайте класс Car с полями:
марка автомобиля (String brand)
модель (String model)
год выпуска (int year)
Реализуйте методы:
публичный метод для установки данных о марке и модели, которые должны быть проверены на пустоту.
приватный метод, который выводит информацию о состоянии автомобиля (например, возраст машины).
POJO с вложенными объектами
Создайте класс Address с полями:

улица (String street)
город (String city)
индекс (String postalCode)
Создайте класс Customer, который будет включать:

имя клиента (String name)
адрес клиента (Address address).
Реализуйте методы для получения и установки этих значений.

Создайте программу, которая создает несколько объектов Customer и выводит на экран информацию о клиентах и их адресах.

Реализация класса с валидацией данных
Создайте класс User, который будет содержать:
логин (String login)
пароль (String password)
электронную почту (String email)
Реализуйте валидацию:
Логин должен содержать хотя бы 5 символов.
Пароль должен содержать хотя бы одну цифру, одну букву и быть длиной от 8 символов.
Электронная почта должна содержать символ "@".
Реализуйте конструктор и методы для установки этих данных с проверками.